plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
    id 'jacoco'
    id 'org.sonarqube'
}

def androidExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*'
]

task codeCoverageReport(type: JacocoReport, dependsOn: 'testStagingDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    getClassDirectories().setFrom(fileTree(
            dir: 'build/intermediates/classes/staging/debug/com/yourpackage',
            excludes: androidExclusion
    ))

    getSourceDirectories().setFrom(files('src/main/java/yourpackage'))

    getExecutionData().setFrom(files('build/jacoco/testStagingDebugUnitTest.exec'))
}

task getCoverage(type: Exec, dependsOn: 'codeCoverageReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/codeCoverageReport/html/index.html"
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "myProject"
        property "sonar.projectName", "myProject"
        property "sonar.projectVersion", "V1.0"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", ["src/test/java", "src/test/kotlin"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", "${androidExclusion.join(',')}"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/testStagingDebugUnitTest.exec"
        property "sonar.junit.reportsPath", "${project.buildDir}/test-results/testStagingDebugUnitTest"
    }
}

android {
    compileSdk 30

    defaultConfig {
        applicationId "com.srk.nytimes"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.srk.nytimes.NYTimesTestRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_URL", '"http://api.nytimes.com/"'
            buildConfigField "String", "API_KEY", '"1j38PYmbdd94tq7tTGAOqYMo6sgboQ3m"'
            debuggable true
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
    }

}

dependencies {

    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Hilt dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.test:monitor:$test_monitor_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Retrofit2 for REST api
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // okhttp3 support client for retrofit
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // Glide for image load
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Timber for log
    implementation "com.jakewharton.timber:timber:$timber_version"

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    androidTestImplementation "com.google.truth:truth:$truth_version"
    androidTestImplementation "androidx.arch.core:core-testing:$core_test_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
}